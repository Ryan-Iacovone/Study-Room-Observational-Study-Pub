legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
# Calculate percentages
totals <- study %>% count(Numer_Of_People)
totals$percent_NOP <- totals$n / sum(totals$n) * 100
totals$Numer_Of_People <- as.character(totals$Numer_Of_People)
# Create the pie chart
ggplot(totals, aes(x = "", y = percent_NOP, fill = Numer_Of_People)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "Study Rooms Requests by Group Size"
) +
theme_void()
study %>% ggplot(aes(x=Numer_Of_People, fill = Room_Avaliable)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab('Group Size (Number of People per Group)') +
ylab("Observations") +
ggtitle("Success of Getting a Study Room by Group Size") +
labs(caption = "Figure 1.2") +
scale_fill_manual(name= "Room Available?", labels= c("Yes", "No"), values=c("#66A61E", "#7570B3")) +
scale_y_continuous(
breaks = seq(0, 145, by = 10)) +
theme_clean()+
theme(legend.position = c(.7, .6),
plot.title = element_text(size = 12))
one <- study %>% ggplot(aes(x=Numer_Of_People, fill = Time)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab("Group Size (Number of People per Group)") +
ylab("Observaitons") +
ggtitle("Study Rooms Requests by Time") +
labs(caption = "Figure 1.3")+
scale_fill_brewer(labels= c("Morning", "Afternoon", "Evening"), palette = "Dark2") +
scale_y_continuous(
breaks = seq(0, 110, by = 5),
limits = c(0, 105)) +
theme_clean() +
theme(legend.position = c(.6, .6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/Quarterly Reports/Graphs/testingsy.png")
study %>% ggplot(aes(x=Numer_Of_People, fill = Time)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab("Group Size (Number of People per Group)") +
ylab("Observaitons") +
ggtitle("Study Rooms Requests by Time") +
labs(caption = "Figure 1.3")+
scale_fill_brewer(labels= c("Morning", "Afternoon", "Evening"), palette = "Dark2") +
scale_y_continuous(
breaks = seq(0, 110, by = 5),
limits = c(0, 105)) +
theme_clean() +
theme(legend.position = c(.6, .6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/Quarterly Reports/Graphs/testingsy.png")
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/KDL Project/Study Rooms/Wrangling.R")
study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_boxplot()
# Calculate percentages
totals <- study %>% count(Numer_Of_People)
totals$percent_NOP <- totals$n / sum(totals$n) * 100
totals$Numer_Of_People <- as.character(totals$Numer_Of_People)
# Create the pie chart
ggplot(totals, aes(x = "", y = percent_NOP, fill = Numer_Of_People)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "Study Rooms Requests by Group Size"
) +
theme_void()
size <- study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_histogram(stat = "count", position = "dodge2", color = "black", fill = "#1F78B4", width = .6) +
ggtitle("Study Rooms Requests by Group Size") +
xlab("Group Size (Number of People per Group)") +
ylab("Observations") +
labs(caption = "Figure 1.1")  +
scale_y_continuous(
breaks = seq(0, 190, by = 10),
limits = c(0, 190)) +
theme_clean() +
theme(legend.position = c(0.6, 0.6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
size
success <- study %>% ggplot(aes(x=Numer_Of_People, fill = Room_Avaliable)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab('Group Size (Number of People per Group)') +
ylab("Observations") +
ggtitle("Success of Getting a Study Room by Group Size") +
labs(caption = "Figure 1.2") +
scale_fill_manual(name= "Room Available?", labels= c("Yes", "No"), values=c("#66A61E", "#7570B3")) +
scale_y_continuous(
breaks = seq(0, 145, by = 10)) +
theme_clean() +
theme(legend.position = c(.7, .6),
plot.title = element_text(size = 12))
success
time <- study %>% ggplot(aes(x=Numer_Of_People, fill = Time)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab("Group Size (Number of People per Group)") +
ylab("Observaitons") +
ggtitle("Study Rooms Requests by Time") +
labs(caption = "Figure 1.3")+
scale_fill_brewer(labels= c("Morning", "Afternoon", "Evening"), palette = "Dark2") +
scale_y_continuous(
breaks = seq(0, 110, by = 5),
limits = c(0, 105)) +
theme_clean() +
theme(legend.position = c(.6, .6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
time
study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_histogram(stat = "count", position = "dodge2", color = "black", fill = "#1F78B4", width = .6) +
ggtitle("Study Rooms Requests by Group Size") +
xlab("Group Size (Number of People per Group)") +
ylab("Observations") +
labs(caption = "Figure 1.1")  +
scale_y_continuous(
breaks = seq(0, 190, by = 10),
limits = c(0, 190)) +
theme_clean() +
theme(legend.position = c(0.6, 0.6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
size
study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_histogram(stat = "count", position = "dodge2", color = "black", fill = "#1F78B4", width = .6) +
ggtitle("Study Rooms Requests by Group Size") +
xlab("Group Size (Number of People per Group)") +
ylab("Observations") +
labs(caption = "Figure 1.1")  +
scale_y_continuous(
breaks = seq(0, 190, by = 10),
limits = c(0, 190)) +
theme_clean() +
theme(legend.position = c(0.6, 0.6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
size
success <- study %>% ggplot(aes(x=Numer_Of_People, fill = Room_Avaliable)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab('Group Size (Number of People per Group)') +
ylab("Observations") +
ggtitle("Success of Getting a Study Room by Group Size") +
labs(caption = "Figure 1.2") +
scale_fill_manual(name= "Room Available?", labels= c("Yes", "No"), values=c("#66A61E", "#7570B3")) +
scale_y_continuous(
breaks = seq(0, 145, by = 10)) +
theme_clean() +
theme(legend.position = c(.7, .6),
plot.title = element_text(size = 12))
success
time <- study %>% ggplot(aes(x=Numer_Of_People, fill = Time)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab("Group Size (Number of People per Group)") +
ylab("Observaitons") +
ggtitle("Study Rooms Requests by Time") +
labs(caption = "Figure 1.3")+
scale_fill_brewer(labels= c("Morning", "Afternoon", "Evening"), palette = "Dark2") +
scale_y_continuous(
breaks = seq(0, 110, by = 5),
limits = c(0, 105)) +
theme_clean() +
theme(legend.position = c(.6, .6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
time
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/Quarterly Reports/Graphs/testingsy.png")
size
size <- study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_histogram(stat = "count", position = "dodge2", color = "black", fill = "#1F78B4", width = .6) +
ggtitle("Study Rooms Requests by Group Size") +
xlab("Group Size (Number of People per Group)") +
ylab("Observations") +
labs(caption = "Figure 1.1")  +
scale_y_continuous(
breaks = seq(0, 190, by = 10),
limits = c(0, 190)) +
theme_clean() +
theme(legend.position = c(0.6, 0.6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
size
# Create a new figure and plot the first graph
plot(x1, y1)
library(ggplot2)
# Create the first plot
p1 <- ggplot(mtcars, aes(x = mpg, y = disp)) +
geom_point()
# Create the second plot
p2 <- ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point()
# Display both plots on the same device using fig.show = 'hold'
p1 + theme_bw() + labs(title = "Plot 1")
p2 + theme_bw() + labs(title = "Plot 2", subtitle = "Displayed on top of Plot 1")
p1 + theme_bw() + labs(title = "Plot 1")
library(ggplot2)
# Create the first plot
p1 <- ggplot(mtcars, aes(x = mpg, y = disp)) +
geom_point()
# Create the second plot
p2 <- ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point()
# Display both plots on the same device using fig.show = 'hold'
p1 + theme_bw() + labs(title = "Plot 1")
p2 + theme_bw() + labs(title = "Plot 2", subtitle = "Displayed on top of Plot 1")
study %>% ggplot(aes(x=Numer_Of_People, fill = Room_Avaliable)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab('Group Size (Number of People per Group)') +
ylab("Observations") +
ggtitle("Success of Getting a Study Room by Group Size") +
labs(caption = "Figure 1.2") +
scale_fill_manual(name= "Room Available?", labels= c("Yes", "No"), values=c("#66A61E", "#7570B3")) +
scale_y_continuous(
breaks = seq(0, 145, by = 10)) +
theme_clean() +
theme(legend.position = c(.7, .6),
plot.title = element_text(size = 12))
success
size <- study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_histogram(stat = "count", position = "dodge2", color = "black", fill = "#1F78B4", width = .6) +
ggtitle("Study Rooms Requests by Group Size") +
xlab("Group Size (Number of People per Group)") +
ylab("Observations") +
labs(caption = "Figure 1.1")  +
scale_y_continuous(
breaks = seq(0, 190, by = 10),
limits = c(0, 190)) +
theme_clean() +
theme(legend.position = c(0.6, 0.6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
size
time <- study %>% ggplot(aes(x=Numer_Of_People, fill = Time)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab("Group Size (Number of People per Group)") +
ylab("Observaitons") +
ggtitle("Study Rooms Requests by Time") +
labs(caption = "Figure 1.3")+
scale_fill_brewer(labels= c("Morning", "Afternoon", "Evening"), palette = "Dark2") +
scale_y_continuous(
breaks = seq(0, 110, by = 5),
limits = c(0, 105)) +
theme_clean() +
theme(legend.position = c(.6, .6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
time
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/Quarterly Reports/Graphs/testingsy.png")
# The as.Date() function is used to convert the orginal character date column into a date vector. It takes a character vector as input and returns a date vector with the same length.
study$newdate <- as.Date(study$Date)
#Formats new date function into the format 11/07/2022 (month, day, 4 digit year)
study$newdate <- format(study$newdate, "%m/%d/%Y")
study <- study %>% mutate(days = weekdays(Date))
tab <- tabyl(study, newdate, Room_Avaliable, days) %>%
adorn_totals(c("row", "col")) %>%
mutate(Success_rate = yes/Total) %>%
adorn_pct_formatting(,,,Success_rate)
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/KDL Project/Study Rooms/Wrangling.R")
#Function from the stringr library that will count all instances of 'yes' and 'no' observations from the variable Room_Avaliable
y <-str_count(study$Room_Avaliable, "yes")
n <-str_count(study$Room_Avaliable, "no")
#Using the summarize function to create a data frame that highlights some important summary statistics to be included in the report
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
print(m)
summary(study$Numer_Of_People)
#this code is creating a cross-tabulation table from the study1 data frame and adding row and column totals, as well as a new column with the success rate calculated from the yes and Total columns. The success rate column is also formatted as a percentage.
tab <- tabyl(study1, Time, Room_Avaliable) %>%
adorn_totals(c("row", "col")) %>%
mutate(Success_rate = yes/Total) %>%
adorn_pct_formatting(,,,Success_rate)
print(tab)
# The as.Date() function is used to convert the orginal character date column into a date vector. It takes a character vector as input and returns a date vector with the same length.
study$newdate <- as.Date(study$Date)
#Formats new date function into the format 11/07/2022 (month, day, 4 digit year)
study$newdate <- format(study$newdate, "%m/%d/%Y")
#Code to create a cross tabulation investigating success rate of getting a study by individual day applying the percent format to the success_rate column
tab <- tabyl(study, newdate, Room_Avaliable) %>%
adorn_totals(c("row", "col")) %>%
mutate(Success_rate = yes/Total) %>%
adorn_pct_formatting(,,,Success_rate)
print(tab)
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/KDL Project/Study Rooms/Wrangling.R")
study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_boxplot()
# Calculate percentages
totals <- study %>% count(Numer_Of_People)
totals$percent_NOP <- totals$n / sum(totals$n) * 100
totals$Numer_Of_People <- as.character(totals$Numer_Of_People)
# Create the pie chart
ggplot(totals, aes(x = "", y = percent_NOP, fill = Numer_Of_People)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "Study Rooms Requests by Group Size"
) +
theme_void()
study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_histogram(stat = "count", position = "dodge2", color = "black", fill = "#1F78B4", width = .6) +
ggtitle("Study Rooms Requests by Group Size") +
xlab("Group Size (Number of People per Group)") +
ylab("Observations") +
labs(caption = "Figure 1.1")  +
scale_y_continuous(
breaks = seq(0, 190, by = 10),
limits = c(0, 190)) +
theme_clean() +
theme(legend.position = c(0.6, 0.6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
size
size <- study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_histogram(stat = "count", position = "dodge2", color = "black", fill = "#1F78B4", width = .6) +
ggtitle("Study Rooms Requests by Group Size") +
xlab("Group Size (Number of People per Group)") +
ylab("Observations") +
labs(caption = "Figure 1.1")  +
scale_y_continuous(
breaks = seq(0, 190, by = 10),
limits = c(0, 190)) +
theme_clean() +
theme(legend.position = c(0.6, 0.6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
size
success <- study %>% ggplot(aes(x=Numer_Of_People, fill = Room_Avaliable)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab('Group Size (Number of People per Group)') +
ylab("Observations") +
ggtitle("Success of Getting a Study Room by Group Size") +
labs(caption = "Figure 1.2") +
scale_fill_manual(name= "Room Available?", labels= c("Yes", "No"), values=c("#66A61E", "#7570B3")) +
scale_y_continuous(
breaks = seq(0, 145, by = 10)) +
theme_clean() +
theme(legend.position = c(.7, .6),
plot.title = element_text(size = 12))
success
time <- study %>% ggplot(aes(x=Numer_Of_People, fill = Time)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab("Group Size (Number of People per Group)") +
ylab("Observaitons") +
ggtitle("Study Rooms Requests by Time") +
labs(caption = "Figure 1.3")+
scale_fill_brewer(labels= c("Morning", "Afternoon", "Evening"), palette = "Dark2") +
scale_y_continuous(
breaks = seq(0, 110, by = 5),
limits = c(0, 105)) +
theme_clean() +
theme(legend.position = c(.6, .6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
time
#Displays all colorblind friendly colors in brewer library
display.brewer.all(colorblindFriendly = TRUE)
#Finding and then displaying the code names for specific colorblind friendly colors to use in the following data visualizations
display.brewer.pal(8, "Paired")
brewer.pal(8, "Paired")
#The following code imports code from an R markdown file by converting it to a .R file then using the source function to bring it over
#The quiet argument, when set to TRUE, supresses messages and warnings generated by knitr::purl during the extraction process.
#By setting quiet=TRUE, the function will only return the source code, without any additional messages or warnings. This can be useful for making the code extraction process less verbose, or for suppressing messages that might interfere with your workflow.
source(knitr::purl("C:/Users/Ryan/Coding Projects/KDL Project/Wrangling.Rmd", quiet=TRUE))
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/KDL Project/Study Rooms/Wrangling.R")
#Function from the stringr library that will count all instances of 'yes' and 'no' observations from the variable Room_Avaliable
y <-str_count(study$Room_Avaliable, "yes")
n <-str_count(study$Room_Avaliable, "no")
#Using the summarize function to create a data frame that highlights some important summary statistics to be included in the report
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
print(m)
summary(study$Numer_Of_People)
#this code is creating a cross-tabulation table from the study1 data frame and adding row and column totals, as well as a new column with the success rate calculated from the yes and Total columns. The success rate column is also formatted as a percentage.
tab <- tabyl(study1, Time, Room_Avaliable) %>%
adorn_totals(c("row", "col")) %>%
mutate(Success_rate = yes/Total) %>%
adorn_pct_formatting(,,,Success_rate)
print(tab)
# The as.Date() function is used to convert the orginal character date column into a date vector. It takes a character vector as input and returns a date vector with the same length.
study$newdate <- as.Date(study$Date)
#Formats new date function into the format 11/07/2022 (month, day, 4 digit year)
study$newdate <- format(study$newdate, "%m/%d/%Y")
#Code to create a cross tabulation investigating success rate of getting a study by individual day applying the percent format to the success_rate column
tab <- tabyl(study, newdate, Room_Avaliable) %>%
adorn_totals(c("row", "col")) %>%
mutate(Success_rate = yes/Total) %>%
adorn_pct_formatting(,,,Success_rate)
print(tab)
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/KDL Project/Study Rooms/Wrangling.R")
soruce("C:/Users/Ryan/Coding Projects/Public Forks/PUB Studies/Wrangling.R")
source("C:/Users/Ryan/Coding Projects/Public Forks/PUB Studies/Wrangling.R")
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/Public Forks/Study Rooms pub/Wrangling.R")
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/Public Forks/Study Rooms pub/Wrangling.R")
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/Public Forks/PUB Studies/Wrangling.R")
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/Public Forks/PUB Studies/Wrangling.R")
study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_boxplot()
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/Public Forks/PUB Studies/Wrangling.R")
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/Public Forks/PUB Studies/Wrangling.R")
study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_boxplot()
# Calculate percentages
totals <- study %>% count(Numer_Of_People)
totals$percent_NOP <- totals$n / sum(totals$n) * 100
totals$Numer_Of_People <- as.character(totals$Numer_Of_People)
# Create the pie chart
ggplot(totals, aes(x = "", y = percent_NOP, fill = Numer_Of_People)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "Study Rooms Requests by Group Size"
) +
theme_void()
size <- study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_histogram(stat = "count", position = "dodge2", color = "black", fill = "#1F78B4", width = .6) +
ggtitle("Study Rooms Requests by Group Size") +
xlab("Group Size (Number of People per Group)") +
ylab("Observations") +
labs(caption = "Figure 1.1")  +
scale_y_continuous(
breaks = seq(0, 190, by = 10),
limits = c(0, 190)) +
theme_clean() +
theme(legend.position = c(0.6, 0.6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
size
success <- study %>% ggplot(aes(x=Numer_Of_People, fill = Room_Avaliable)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab('Group Size (Number of People per Group)') +
ylab("Observations") +
ggtitle("Success of Getting a Study Room by Group Size") +
labs(caption = "Figure 1.2") +
scale_fill_manual(name= "Room Available?", labels= c("Yes", "No"), values=c("#66A61E", "#7570B3")) +
scale_y_continuous(
breaks = seq(0, 145, by = 10)) +
theme_clean() +
theme(legend.position = c(.7, .6),
plot.title = element_text(size = 12))
success
